import os
import re
import logging
import datetime
import asyncio
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    ConversationHandler,
    ContextTypes,
    filters,
)
import git  # GitPython –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å git

# -------------------- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è --------------------
BOT_TOKEN = "7750568426:AAHVidt7_QhBxgiDvHWFsP_hV3BJ5N2QVP8"
if not BOT_TOKEN:
    raise ValueError("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω–∞!")

REPO_PATH = '/Users/aizetta/Documents/Obsidian Vault/Obsidian/–ê—Ä—Ç–µ–º'
ATTACHMENTS_PATH = os.path.join(REPO_PATH, 'attachments')
if not os.path.exists(ATTACHMENTS_PATH):
    os.makedirs(ATTACHMENTS_PATH)

# –®–∞–±–ª–æ–Ω—ã –∑–∞–º–µ—Ç–æ–∫ (–ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ ‚Äì –Ω–∞–∑–≤–∞–Ω–∏–µ, –¥–∞–ª–µ–µ –ø–æ–ª—è)
templates = {
    "–®–∞–±–ª–æ–Ω 1": ["–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏", "–¢–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏"],
    "–®–∞–±–ª–æ–Ω 2": ["–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏", "–û–ø–∏—Å–∞–Ω–∏–µ", "–¢–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏"]
}

# -------------------- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ --------------------
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# -------------------- –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π --------------------
(MAIN_MENU, NOTE_TEXT, TAGS_INPUT, NOTE_PREVIEW, SEARCH_INPUT,
 REMINDER_INPUT, FILE_ATTACHMENT, TEMPLATE_MENU, FILL_TEMPLATE,
 TEMPLATE_PREVIEW, FOLDER_MENU_TEMPLATE, FOLDER_MENU_NORMAL,
 VIEW_NOTES, VIEW_NOTE) = range(14)

# -------------------- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ --------------------
def sanitize_filename(name: str) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞."""
    name = name.strip().replace(' ', '_')
    return re.sub(r'(?u)[^-\w.]', '', name)

def push_to_github():
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç commit –∏ push —Å –ø–æ–º–æ—â—å—é GitPython."""
    try:
        repo = git.Repo(REPO_PATH)
        repo.git.add(all=True)
        commit_message = f"–î–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è –∑–∞–º–µ—Ç–∫–∞ {datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
        repo.index.commit(commit_message)
        origin = repo.remote(name='origin')
        origin.push()
        logger.info("Git push –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ push –≤ GitHub: {e}")

def single_main_menu_button() -> InlineKeyboardMarkup:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–π –∫–Ω–æ–ø–∫–æ–π 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'."""
    return InlineKeyboardMarkup([[InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')]])

def build_keyboard(rows: list) -> InlineKeyboardMarkup:
    """–£–ø—Ä–æ—â—ë–Ω–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏–∑ —Å–ø–∏—Å–∫–∞ —Ä—è–¥–æ–≤."""
    return InlineKeyboardMarkup(rows)

# -------------------- –û—Å–Ω–æ–≤–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ --------------------
async def show_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, –≤ –∫–æ—Ç–æ—Ä–æ–º:
      - –≤—ã–≤–æ–¥—è—Ç—Å—è –∫–æ—Ä–Ω–µ–≤—ã–µ (—Ç–µ–∫—É—â–µ–π) –ø–∞–ø–∫–∏;
      - –¥–æ—Å—Ç—É–ø–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è: —Å–æ–∑–¥–∞—Ç—å –∑–∞–º–µ—Ç–∫—É, —Å–æ–∑–¥–∞—Ç—å –∑–∞–º–µ—Ç–∫—É –ø–æ —à–∞–±–ª–æ–Ω—É, –ø–æ–∏—Å–∫, –ø—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–º–µ—Ç–æ–∫, –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞–∑–∞–¥.
    """
    if 'current_folder' not in context.user_data:
        context.user_data['current_folder'] = REPO_PATH
    current_folder = context.user_data['current_folder']
    try:
        folders = [f for f in os.listdir(current_folder)
                   if os.path.isdir(os.path.join(current_folder, f)) and not (f.startswith('.') or f.startswith('_'))]
    except Exception as e:
        await (update.message or update.callback_query).reply_text(f"‚ùó –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–ø–∫–µ: {e}")
        folders = []

    kb = []
    # –ö–Ω–æ–ø–∫–∏ —Å –ø–∞–ø–∫–∞–º–∏ (–∫–∞–∂–¥–∞—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º —Ä—è–¥—É)
    for folder in folders:
        kb.append([InlineKeyboardButton(f"üìÅ {folder}", callback_data=f'folder:{folder}')])
    # –†—è–¥ —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏ (–±–µ–∑ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é)
    kb.append([
        InlineKeyboardButton("üìù –°–æ–∑–¥–∞—Ç—å –∑–∞–º–µ—Ç–∫—É", callback_data='create_note'),
        InlineKeyboardButton("üìã –°–æ–∑–¥–∞—Ç—å –∑–∞–º–µ—Ç–∫—É –∏–∑ —à–∞–±–ª–æ–Ω–∞", callback_data='create_template')
    ])
    kb.append([
        InlineKeyboardButton("üîç –ü–æ–∏—Å–∫", callback_data='search'),
        InlineKeyboardButton("üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–º–µ—Ç–æ–∫", callback_data='view_notes')
    ])
    # –ï—Å–ª–∏ –Ω–µ –≤ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–µ ‚Äì –¥–æ–±–∞–≤–ª—è–µ–º —Ä—è–¥ —Å –∫–Ω–æ–ø–∫–æ–π "üîô –ù–∞–∑–∞–¥" –∏ –æ—Ç–¥–µ–ª—å–Ω–æ "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
    if os.path.abspath(current_folder) != os.path.abspath(REPO_PATH):
        kb.append([
            InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back'),
            InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')
        ])
    markup = build_keyboard(kb)
    text = f"üìÇ –¢–µ–∫—É—â–∞—è –ø–∞–ø–∫–∞: {current_folder}\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É –∏–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ:"
    if update.message:
        await update.message.reply_text(text, reply_markup=markup)
    elif update.callback_query:
        await update.callback_query.edit_message_text(text, reply_markup=markup)
    return MAIN_MENU

async def main_menu_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é."""
    query = update.callback_query
    await query.answer()
    data = query.data
    if data.startswith('folder:'):
        folder_name = data.split(":", 1)[1]
        current_folder = context.user_data.get('current_folder', REPO_PATH)
        new_folder = os.path.join(current_folder, folder_name)
        if os.path.isdir(new_folder):
            context.user_data['current_folder'] = new_folder
        return await show_main_menu(update, context)
    elif data == 'back':
        current_folder = context.user_data.get('current_folder', REPO_PATH)
        parent_folder = os.path.dirname(current_folder)
        # –ï—Å–ª–∏ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è –ø–∞–ø–∫–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        if os.path.commonpath([REPO_PATH, os.path.abspath(parent_folder)]) == os.path.abspath(REPO_PATH):
            context.user_data['current_folder'] = parent_folder
        else:
            context.user_data['current_folder'] = REPO_PATH
        return await show_main_menu(update, context)
    elif data == 'create_note':
        await query.edit_message_text("üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏.\n–ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ —Å—Ç–∞–Ω–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–æ–º:\n\n(–î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞–∂–º–∏—Ç–µ üè†)", reply_markup=single_main_menu_button())
        return NOTE_TEXT
    elif data == 'search':
        await query.edit_message_text("üîç –í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∑–∞–º–µ—Ç–æ–∫:\n\n(üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é)", reply_markup=single_main_menu_button())
        return SEARCH_INPUT
    elif data == 'view_notes':
        return await show_view_notes_menu(update, context)
    elif data == 'create_template':
        return await show_template_menu(update, context)
    elif data == 'main_menu':
        return await show_main_menu(update, context)
    else:
        await query.edit_message_text("‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä.", reply_markup=single_main_menu_button())
        return MAIN_MENU

# -------------------- –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ã—á–Ω–æ–π –∑–∞–º–µ—Ç–∫–∏ --------------------
async def note_text_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤–≤–µ–¥—ë–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ –≤–≤–æ–¥—É —Ç–µ–≥–æ–≤."""
    note_text = update.message.text
    if not note_text:
        await update.message.reply_text("‚ùó –¢–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥:")
        return NOTE_TEXT
    context.user_data['note_text'] = note_text
    await update.message.reply_text("üè∑Ô∏è –í–≤–µ–¥–∏—Ç–µ —Ç–µ–≥–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –ø—É—Å—Ç—ã–º):\n\n(üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é)", reply_markup=single_main_menu_button())
    return TAGS_INPUT

async def tags_input_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ —Ç–µ–≥–æ–≤ –∏ –≤—ã–≤–æ–¥–∏—Ç –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–º–µ—Ç–∫–∏."""
    tags_text = update.message.text
    tags = [tag.strip() for tag in tags_text.split(',')] if tags_text else []
    context.user_data['tags'] = tags
    note_text = context.user_data.get('note_text', '')
    preview = f"üëÅÔ∏è –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä:\n\n{note_text}\n"
    if tags:
        preview += f"\nüè∑Ô∏è –¢–µ–≥–∏: {', '.join(tags)}"
    kb = [
        [
            InlineKeyboardButton("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data='save_note_default'),
            InlineKeyboardButton("üìÇ –í—ã–±—Ä–∞—Ç—å –ø–∞–ø–∫—É", callback_data='choose_folder_note')
        ],
        [
            InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data='edit_note'),
            InlineKeyboardButton("üìé –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–∞–π–ª", callback_data='attach_note_file')
        ]
    ]
    # –î–æ–±–∞–≤–ª—è–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—É—é –∫–Ω–æ–ø–∫—É "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º —Ä—è–¥—É
    kb.append([InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')])
    await update.message.reply_text(preview, reply_markup=build_keyboard(kb))
    return NOTE_PREVIEW

async def note_preview_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –≤ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–º –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –∑–∞–º–µ—Ç–∫–∏."""
    query = update.callback_query
    await query.answer()
    data = query.data
    if data == 'save_note_default':
        note_text = context.user_data.get('note_text', '')
        tags = context.user_data.get('tags', [])
        title = note_text.splitlines()[0] if note_text.splitlines() else "–ë–µ–∑_–Ω–∞–∑–≤–∞–Ω–∏—è"
        safe_title = sanitize_filename(title)
        timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"{safe_title}_{timestamp}.md"
        current_folder = context.user_data.get('current_folder', REPO_PATH)
        filepath = os.path.join(current_folder, filename)
        if tags:
            note_text += f"\n\nüè∑Ô∏è –¢–µ–≥–∏: {', '.join(tags)}"
        try:
            with open(filepath, 'w', encoding='utf-8') as f:
                f.write(note_text)
            push_to_github()
            await query.edit_message_text(f"‚úÖ –ó–∞–º–µ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {filepath}\n–ò —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —Å GitHub.", reply_markup=single_main_menu_button())
        except Exception as e:
            await query.edit_message_text(f"‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–º–µ—Ç–∫–∏: {e}", reply_markup=single_main_menu_button())
        return await show_main_menu(update, context)
    elif data == 'choose_folder_note':
        return await show_folder_menu_normal(query, context)
    elif data == 'edit_note':
        await query.edit_message_text("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏:\n\n(üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é)", reply_markup=single_main_menu_button())
        return NOTE_TEXT
    elif data == 'attach_note_file':
        await query.edit_message_text("üìé –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –¥–ª—è –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏—è:\n\n(üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é)", reply_markup=single_main_menu_button())
        return FILE_ATTACHMENT
    elif data == 'main_menu':
        return await show_main_menu(update, context)
    else:
        await query.edit_message_text("‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä.", reply_markup=single_main_menu_button())
        return NOTE_PREVIEW

async def file_attachment_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü—Ä–∏–∫—Ä–µ–ø–ª—è–µ—Ç —Ñ–∞–π–ª –∫ –∑–∞–º–µ—Ç–∫–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–º—É –ø—Ä–æ—Å–º–æ—Ç—Ä—É."""
    if update.message.document:
        document = update.message.document
        file = await document.get_file()
        file_path = os.path.join(ATTACHMENTS_PATH, document.file_name)
        await file.download_to_drive(custom_path=file_path)
        note_text = context.user_data.get('note_text', '')
        note_text += f"\n\nüìé –í–ª–æ–∂–µ–Ω–∏–µ: {file_path}"
        context.user_data['note_text'] = note_text
        await update.message.reply_text(f"‚úÖ –§–∞–π–ª –ø—Ä–∏–∫—Ä–µ–ø–ª—ë–Ω: {file_path}", reply_markup=single_main_menu_button())
    elif update.message.photo:
        photo = update.message.photo[-1]
        file = await photo.get_file()
        file_name = f"photo_{datetime.datetime.now().strftime('%Y%m%d_%H%M%S')}.jpg"
        file_path = os.path.join(ATTACHMENTS_PATH, file_name)
        await file.download_to_drive(custom_path=file_path)
        note_text = context.user_data.get('note_text', '')
        note_text += f"\n\nüìé –§–æ—Ç–æ: {file_path}"
        context.user_data['note_text'] = note_text
        await update.message.reply_text(f"‚úÖ –§–æ—Ç–æ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ: {file_path}", reply_markup=single_main_menu_button())
    else:
        await update.message.reply_text("‚ùó –ù–µ—Ç —Ñ–∞–π–ª–∞. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.", reply_markup=single_main_menu_button())
        return FILE_ATTACHMENT
    return await note_preview_handler(update, context)

async def show_folder_menu_normal(query, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–í—ã–≤–æ–¥–∏—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ø–∞–ø–∫–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏."""
    current_folder = context.user_data.get('current_folder', REPO_PATH)
    try:
        folders = [f for f in os.listdir(current_folder)
                   if os.path.isdir(os.path.join(current_folder, f)) and not (f.startswith('.') or f.startswith('_'))]
    except Exception as e:
        await query.edit_message_text(f"‚ùó –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–ø–∫–µ: {e}")
        return NOTE_PREVIEW
    kb = []
    for folder in folders:
        kb.append([InlineKeyboardButton(f"üìÅ {folder}", callback_data=f'normal_folder:{folder}')])
    kb.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='normal_back'),
               InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')])
    await query.edit_message_text(f"üìÇ –¢–µ–∫—É—â–∞—è –ø–∞–ø–∫–∞: {current_folder}\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏:", reply_markup=build_keyboard(kb))
    return FOLDER_MENU_NORMAL

async def normal_folder_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–∞–º–µ—Ç–∫—É –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–∞–ø–∫–µ."""
    query = update.callback_query
    await query.answer()
    data = query.data
    if data.startswith('normal_folder:'):
        folder_name = data.split(":", 1)[1]
        current_folder = context.user_data.get('current_folder', REPO_PATH)
        new_folder = os.path.join(current_folder, folder_name)
        if os.path.isdir(new_folder):
            context.user_data['current_folder'] = new_folder
        else:
            await query.edit_message_text("‚ùó –ü–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return await show_folder_menu_normal(query, context)
        note_text = context.user_data.get('note_text', '')
        tags = context.user_data.get('tags', [])
        title = note_text.splitlines()[0] if note_text.splitlines() else "–ë–µ–∑_–Ω–∞–∑–≤–∞–Ω–∏—è"
        safe_title = sanitize_filename(title)
        timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"{safe_title}_{timestamp}.md"
        filepath = os.path.join(new_folder, filename)
        if tags:
            note_text += f"\n\nüè∑Ô∏è –¢–µ–≥–∏: {', '.join(tags)}"
        try:
            with open(filepath, 'w', encoding='utf-8') as f:
                f.write(note_text)
            push_to_github()
            await query.edit_message_text(f"‚úÖ –ó–∞–º–µ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {filepath}", reply_markup=single_main_menu_button())
        except Exception as e:
            await query.edit_message_text(f"‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–º–µ—Ç–∫–∏: {e}", reply_markup=single_main_menu_button())
        return await show_main_menu(update, context)
    elif data == 'normal_back':
        return await note_preview_handler(update, context)
    elif data == 'main_menu':
        return await show_main_menu(update, context)
    else:
        await query.edit_message_text("‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä.", reply_markup=single_main_menu_button())
        return FOLDER_MENU_NORMAL

# -------------------- –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–º–µ—Ç–æ–∫ --------------------
async def show_view_notes_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–º–µ—Ç–æ–∫ (.md —Ñ–∞–π–ª–æ–≤) –≤ —Ç–µ–∫—É—â–µ–π –ø–∞–ø–∫–µ."""
    current_folder = context.user_data.get('current_folder', REPO_PATH)
    try:
        files = [f for f in os.listdir(current_folder)
                 if os.path.isfile(os.path.join(current_folder, f)) and f.endswith('.md')]
    except Exception as e:
        await update.callback_query.edit_message_text(f"‚ùó –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–ø–∫–µ: {e}")
        files = []
    text = f"üëÄ –ó–∞–º–µ—Ç–∫–∏ –≤ –ø–∞–ø–∫–µ: {current_folder}" if files else "‚ùó –í —Ç–µ–∫—É—â–µ–π –ø–∞–ø–∫–µ –Ω–µ—Ç –∑–∞–º–µ—Ç–æ–∫."
    kb = []
    for file in files:
        kb.append([InlineKeyboardButton(f"üìÑ {file}", callback_data=f'view_note:{file}')])
    kb.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='main_menu')])
    await update.callback_query.edit_message_text(text, reply_markup=build_keyboard(kb))
    return VIEW_NOTES

async def view_note_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–í—ã–≤–æ–¥–∏—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∑–∞–º–µ—Ç–∫–∏ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞."""
    query = update.callback_query
    await query.answer()
    data = query.data
    if data.startswith('view_note:'):
        file_name = data.split(":", 1)[1]
        current_folder = context.user_data.get('current_folder', REPO_PATH)
        file_path = os.path.join(current_folder, file_name)
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                content = f.read()
            text = f"üìÑ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –∑–∞–º–µ—Ç–∫–∏ {file_name}:\n\n{content}"
        except Exception as e:
            text = f"‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}"
        kb = [
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data='view_notes')],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')]
        ]
        await query.edit_message_text(text, reply_markup=build_keyboard(kb))
        return VIEW_NOTE
    elif data == 'view_notes':
        return await show_view_notes_menu(update, context)
    elif data == 'main_menu':
        return await show_main_menu(update, context)
    else:
        await query.edit_message_text("‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä.", reply_markup=single_main_menu_button())
        return VIEW_NOTES

# -------------------- –ü–æ–∏—Å–∫ –∑–∞–º–µ—Ç–æ–∫ --------------------
async def search_input_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ò—â–µ—Ç –∑–∞–º–µ—Ç–∫–∏ –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É –≤–æ –≤—Å–µ—Ö .md —Ñ–∞–π–ª–∞—Ö —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è."""
    keyword = update.message.text
    if not keyword:
        await update.message.reply_text("‚ùó –ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.", reply_markup=single_main_menu_button())
        return SEARCH_INPUT
    results = []
    for root, dirs, files in os.walk(REPO_PATH):
        for file in files:
            if file.endswith('.md'):
                filepath = os.path.join(root, file)
                try:
                    with open(filepath, 'r', encoding='utf-8') as f:
                        content = f.read()
                    if keyword.lower() in content.lower():
                        results.append(os.path.relpath(filepath, REPO_PATH))
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {filepath}: {e}")
    result_text = "üîç –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏:\n" + "\n".join(results) if results else "‚ùó –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
    await update.message.reply_text(result_text, reply_markup=single_main_menu_button())
    return await show_main_menu(update, context)

# -------------------- –®–∞–±–ª–æ–Ω—ã –∑–∞–º–µ—Ç–æ–∫ --------------------
async def show_template_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–í—ã–≤–æ–¥–∏—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —à–∞–±–ª–æ–Ω–∞."""
    kb = []
    for tmpl in templates.keys():
        kb.append([InlineKeyboardButton(f"üìã {tmpl}", callback_data=f'template:{tmpl}')])
    kb.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='main_menu')])
    await (update.callback_query or update.message).reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω –∑–∞–º–µ—Ç–∫–∏:", reply_markup=build_keyboard(kb))
    return TEMPLATE_MENU

async def template_menu_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —à–∞–±–ª–æ–Ω–∞ –∏ –Ω–∞—á–∏–Ω–∞–µ—Ç –µ–≥–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ."""
    query = update.callback_query
    await query.answer()
    data = query.data
    if data.startswith('template:'):
        tmpl_name = data.split(":", 1)[1]
        context.user_data['selected_template'] = tmpl_name
        context.user_data['template_fields'] = templates[tmpl_name]
        context.user_data['template_data'] = []
        context.user_data['template_index'] = 0
        first_field = context.user_data['template_fields'][0]
        await query.edit_message_text(f"‚úèÔ∏è –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–ª–µ: {first_field}\n\n(üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é)", reply_markup=single_main_menu_button())
        return FILL_TEMPLATE
    elif data == 'main_menu':
        return await show_main_menu(update, context)
    else:
        await query.edit_message_text("‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä.", reply_markup=single_main_menu_button())
        return TEMPLATE_MENU

async def fill_template_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ó–∞–ø–æ–ª–Ω—è–µ—Ç —à–∞–±–ª–æ–Ω –ø–æ —à–∞–≥–∞–º –∏ –≤—ã–≤–æ–¥–∏—Ç –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä."""
    user_input = update.message.text
    if not user_input:
        await update.message.reply_text("‚ùó –ó–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.", reply_markup=single_main_menu_button())
        return FILL_TEMPLATE
    context.user_data['template_data'].append(user_input)
    context.user_data['template_index'] += 1
    fields = context.user_data['template_fields']
    if context.user_data['template_index'] < len(fields):
        next_field = fields[context.user_data['template_index']]
        await update.message.reply_text(f"‚úèÔ∏è –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–ª–µ: {next_field}\n\n(üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é)", reply_markup=single_main_menu_button())
        return FILL_TEMPLATE
    else:
        note_title = context.user_data['template_data'][0]
        note_body = "\n".join(context.user_data['template_data'][1:]) if len(context.user_data['template_data']) > 1 else ""
        preview = f"üëÅÔ∏è –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä —à–∞–±–ª–æ–Ω–Ω–æ–π –∑–∞–º–µ—Ç–∫–∏:\n\n–ù–∞–∑–≤–∞–Ω–∏–µ: {note_title}\n–¢–µ–∫—Å—Ç: {note_body}"
        kb = [
            [InlineKeyboardButton("üìÇ –í—ã–±—Ä–∞—Ç—å –ø–∞–ø–∫—É", callback_data='choose_folder_template')],
            [InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data='edit_template')]
        ]
        kb.append([InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')])
        await update.message.reply_text(preview, reply_markup=build_keyboard(kb))
        context.user_data['note_text'] = f"{note_title}\n{note_body}"
        context.user_data['note_title'] = note_title
        return TEMPLATE_PREVIEW

async def template_preview_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø–æ—Å–ª–µ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —à–∞–±–ª–æ–Ω–Ω–æ–π –∑–∞–º–µ—Ç–∫–∏."""
    query = update.callback_query
    await query.answer()
    data = query.data
    if data == 'choose_folder_template':
        return await show_folder_menu_template(query, context)
    elif data == 'edit_template':
        await query.edit_message_text("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –∑–∞–º–µ—Ç–∫–∏:\n\n(üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é)", reply_markup=single_main_menu_button())
        context.user_data['template_data'] = []
        context.user_data['template_index'] = 0
        first_field = context.user_data['template_fields'][0]
        await query.message.reply_text(f"‚úèÔ∏è –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–ª–µ: {first_field}\n\n(üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é)", reply_markup=single_main_menu_button())
        return FILL_TEMPLATE
    elif data == 'main_menu':
        return await show_main_menu(update, context)
    else:
        await query.edit_message_text("‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä.", reply_markup=single_main_menu_button())
        return TEMPLATE_PREVIEW

async def show_folder_menu_template(query, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–í—ã–≤–æ–¥–∏—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ø–∞–ø–∫–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–Ω–æ–π –∑–∞–º–µ—Ç–∫–∏."""
    current_folder = context.user_data.get('current_folder', REPO_PATH)
    try:
        folders = [f for f in os.listdir(current_folder)
                   if os.path.isdir(os.path.join(current_folder, f)) and not (f.startswith('.') or f.startswith('_'))]
    except Exception as e:
        await query.edit_message_text(f"‚ùó –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–ø–∫–µ: {e}")
        return TEMPLATE_PREVIEW
    kb = []
    for folder in folders:
        kb.append([InlineKeyboardButton(f"üìÅ {folder}", callback_data=f'template_folder:{folder}')])
    kb.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='template_back')])
    kb.append([InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')])
    await query.edit_message_text(f"üìÇ –¢–µ–∫—É—â–∞—è –ø–∞–ø–∫–∞: {current_folder}\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–Ω–æ–π –∑–∞–º–µ—Ç–∫–∏:", reply_markup=build_keyboard(kb))
    return FOLDER_MENU_TEMPLATE

async def template_folder_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —à–∞–±–ª–æ–Ω–Ω—É—é –∑–∞–º–µ—Ç–∫—É –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–∞–ø–∫–µ."""
    query = update.callback_query
    await query.answer()
    data = query.data
    if data.startswith('template_folder:'):
        folder_name = data.split(":", 1)[1]
        current_folder = context.user_data.get('current_folder', REPO_PATH)
        new_folder = os.path.join(current_folder, folder_name)
        if os.path.isdir(new_folder):
            context.user_data['current_folder'] = new_folder
        else:
            await query.edit_message_text("‚ùó –ü–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return await show_folder_menu_template(query, context)
        note_text = context.user_data.get('note_text', '')
        note_title = context.user_data.get('note_title', '–ë–µ–∑_–Ω–∞–∑–≤–∞–Ω–∏—è')
        safe_title = sanitize_filename(note_title)
        timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"{safe_title}_{timestamp}.md"
        filepath = os.path.join(new_folder, filename)
        try:
            with open(filepath, 'w', encoding='utf-8') as f:
                f.write(note_text)
            push_to_github()
            await query.edit_message_text(f"‚úÖ –®–∞–±–ª–æ–Ω–Ω–∞—è –∑–∞–º–µ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {filepath}", reply_markup=single_main_menu_button())
        except Exception as e:
            await query.edit_message_text(f"‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–º–µ—Ç–∫–∏: {e}", reply_markup=single_main_menu_button())
        return await show_main_menu(update, context)
    elif data == 'template_back':
        return await template_preview_handler(update, context)
    elif data == 'main_menu':
        return await show_main_menu(update, context)
    else:
        await query.edit_message_text("‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä.", reply_markup=single_main_menu_button())
        return FOLDER_MENU_TEMPLATE

# -------------------- –û—Ç–º–µ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è --------------------
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–º–µ–Ω—è–µ—Ç —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    if update.message:
        await update.message.reply_text("‚ùó –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=single_main_menu_button())
    return await show_main_menu(update, context)

# -------------------- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è --------------------
async def main() -> None:
    application = ApplicationBuilder().token(BOT_TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', show_main_menu)],
        states={
            MAIN_MENU: [CallbackQueryHandler(main_menu_handler)],
            NOTE_TEXT: [MessageHandler(filters.TEXT & ~filters.COMMAND, note_text_handler)],
            TAGS_INPUT: [MessageHandler(filters.TEXT & ~filters.COMMAND, tags_input_handler)],
            NOTE_PREVIEW: [CallbackQueryHandler(note_preview_handler)],
            SEARCH_INPUT: [MessageHandler(filters.TEXT & ~filters.COMMAND, search_input_handler)],
            FILE_ATTACHMENT: [MessageHandler(filters.ALL, file_attachment_handler)],
            TEMPLATE_MENU: [CallbackQueryHandler(template_menu_handler)],
            FILL_TEMPLATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, fill_template_handler)],
            TEMPLATE_PREVIEW: [CallbackQueryHandler(template_preview_handler)],
            FOLDER_MENU_TEMPLATE: [CallbackQueryHandler(template_folder_callback)],
            FOLDER_MENU_NORMAL: [CallbackQueryHandler(normal_folder_callback)],
            VIEW_NOTES: [CallbackQueryHandler(view_note_handler)],
            VIEW_NOTE: [CallbackQueryHandler(view_note_handler)]
        },
        fallbacks=[CommandHandler('cancel', cancel)]
    )

    application.add_handler(conv_handler)
    await application.run_polling()

if __name__ == '__main__':
    import nest_asyncio
    nest_asyncio.apply()
    import asyncio
    asyncio.run(main())
